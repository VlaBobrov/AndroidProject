package com.example.ap.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ap.api.models.Cake;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "cake".
*/
public class CakeDao extends AbstractDao<Cake, Long> {

    public static final String TABLENAME = "cake";

    /**
     * Properties of entity Cake.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Weight = new Property(2, int.class, "Weight", false, "WEIGHT");
        public final static Property Price = new Property(3, int.class, "Price", false, "PRICE");
        public final static Property Description = new Property(4, String.class, "Description", false, "DESCRIPTION");
        public final static Property PathToImage = new Property(5, String.class, "PathToImage", false, "PATH_TO_IMAGE");
    }

    private DaoSession daoSession;


    public CakeDao(DaoConfig config) {
        super(config);
    }
    
    public CakeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"cake\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"WEIGHT\" INTEGER NOT NULL ," + // 2: Weight
                "\"PRICE\" INTEGER NOT NULL ," + // 3: Price
                "\"DESCRIPTION\" TEXT," + // 4: Description
                "\"PATH_TO_IMAGE\" TEXT);"); // 5: PathToImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"cake\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cake entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
        stmt.bindLong(3, entity.getWeight());
        stmt.bindLong(4, entity.getPrice());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(5, Description);
        }
 
        String PathToImage = entity.getPathToImage();
        if (PathToImage != null) {
            stmt.bindString(6, PathToImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cake entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
        stmt.bindLong(3, entity.getWeight());
        stmt.bindLong(4, entity.getPrice());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(5, Description);
        }
 
        String PathToImage = entity.getPathToImage();
        if (PathToImage != null) {
            stmt.bindString(6, PathToImage);
        }
    }

    @Override
    protected final void attachEntity(Cake entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Cake readEntity(Cursor cursor, int offset) {
        Cake entity = new Cake( //
            cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.getInt(offset + 2), // Weight
            cursor.getInt(offset + 3), // Price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // PathToImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cake entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeight(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPathToImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cake entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cake entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cake entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
