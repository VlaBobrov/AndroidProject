package com.example.ap.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ap.api.models.Ingredients;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ingredients".
*/
public class IngredientsDao extends AbstractDao<Ingredients, Long> {

    public static final String TABLENAME = "ingredients";

    /**
     * Properties of entity Ingredients.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property Type = new Property(1, String.class, "Type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property CakeId = new Property(3, int.class, "CakeId", false, "CAKE_ID");
    }

    private DaoSession daoSession;


    public IngredientsDao(DaoConfig config) {
        super(config);
    }
    
    public IngredientsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ingredients\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"TYPE\" TEXT," + // 1: Type
                "\"NAME\" TEXT," + // 2: Name
                "\"CAKE_ID\" INTEGER NOT NULL );"); // 3: CakeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ingredients\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Ingredients entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(2, Type);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
        stmt.bindLong(4, entity.getCakeId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Ingredients entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(2, Type);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
        stmt.bindLong(4, entity.getCakeId());
    }

    @Override
    protected final void attachEntity(Ingredients entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Ingredients readEntity(Cursor cursor, int offset) {
        Ingredients entity = new Ingredients( //
            cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.getInt(offset + 3) // CakeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Ingredients entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCakeId(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Ingredients entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Ingredients entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Ingredients entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
